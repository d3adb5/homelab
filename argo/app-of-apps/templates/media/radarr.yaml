apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: radarr
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: media

  sources:
    - repoURL: {{ .Values.repository.homelab.url }}
      targetRevision: {{ .Values.repository.homelab.targetRevision }}
      path: argo/media/radarr

    - repoURL: https://oauth2-proxy.github.io/manifests
      targetRevision: 8.3.1
      chart: oauth2-proxy

      helm:
        valuesObject:
          config:
            existingSecret: radarr-oidc-secrets

            configFile: |-
              email_domains = ["*"]
              provider = "keycloak-oidc"
              oidc_issuer_url = "https://id.d3adb5.ca/realms/core"
              redirect_url = "https://radarr.d3adb5.ca/oauth2/callback"
              code_challenge_method = "S256"
              allowed_groups = ["/Radarr"]

          ingress:
            enabled: true
            className: nginx
            annotations:
              {{- toYaml .Values.ingress.oauth2ProxyIngressAnnotations | nindent 14 }}
            hosts:
              - "radarr.d3adb5.ca"
            path: /oauth2
            tls:
              - hosts:
                  - "radarr.d3adb5.ca"
                secretName: radarr-tls

    - repoURL: https://charts.d3adb5.net
      targetRevision: 1.1.0
      chart: stateful

      helm:
        valuesObject:
          replicaCount: 1
          image:
            repository: lscr.io/linuxserver/radarr
            tag: "5.27.5@sha256:3ebb31bce86870dbcc15a5db3fba8864e302310cb2adb70476b0b64c1b3dc6dc"
            pullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 80m
              memory: 256Mi
            limits:
              memory: 2Gi
          service:
            port: 7878
          ingress:
            enabled: true
            host: radarr.d3adb5.ca
            className: nginx
            tls:
              enabled: true
              secretName: radarr-tls
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt
              {{- toYaml .Values.ingress.oauth2ProxyAnnotations | nindent 14 }}
          extraEnv:
            - name: TZ
              value: America/Vancouver
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
          extraVolumes:
            - name: movies-library
              persistentVolumeClaim:
                claimName: {{ .Values.media.libraries.movies.claimName }}
          extraVolumeMounts:
            - name: movies-library
              mountPath: /downloads
            - name: config
              mountPath: /config
          extraVolumeClaimTemplates:
            - metadata:
                name: config
              spec:
                accessModes: [ "ReadWriteOnce" ]
                storageClassName: longhorn
                resources:
                  requests:
                    storage: 2Gi

  destination:
    server: https://kubernetes.default.svc
    namespace: {{ .Values.media.namespace }}

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
